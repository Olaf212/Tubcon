// ==================== SISTEMA DE COTIZACI√ìN CONVERSACIONAL COMPLETAMENTE MEJORADO ====================
export const sistemaCotizacion = {
    estado: new Map(),
    
    // Estados posibles en el flujo
    estados: {
        INICIO: 'inicio',
        CAPTURANDO_PRODUCTOS: 'capturando_productos',
        DETALLANDO_ESPECIFICACIONES: 'detallando_especificaciones',
        CONFIRMANDO_INFORMACION: 'confirmando_informacion',
        SOLICITANDO_CONTACTO: 'solicitando_contacto',
        ENVIANDO_CORREO: 'enviando_correo',
        FINALIZADO: 'finalizado'
    },

    // Base de productos estructurada - COMPLETAMENTE ACTUALIZADA
    categoriasProductos: {
        'tubos_tuberias': {
            nombre: 'Tubos y Tuber√≠as',
            productos: {
                'pvc_1/2': { nombre: 'Tubo PVC 1/2"', unidad: 'metro', preguntas: ['¬øCu√°ntos metros?'] },
                'pvc_3/4': { nombre: 'Tubo PVC 3/4"', unidad: 'metro', preguntas: ['¬øCu√°ntos metros?'] },
                'pvc_1': { nombre: 'Tubo PVC 1"', unidad: 'metro', preguntas: ['¬øCu√°ntos metros?'] },
                'pvc_1-1/2': { nombre: 'Tubo PVC 1 1/2"', unidad: 'metro', preguntas: ['¬øCu√°ntos metros?'] },
                'pvc_2': { nombre: 'Tubo PVC 2"', unidad: 'metro', preguntas: ['¬øCu√°ntos metros?'] },
                'pvc_3': { nombre: 'Tubo PVC 3"', unidad: 'metro', preguntas: ['¬øCu√°ntos metros?'] },
                'pvc_4': { nombre: 'Tubo PVC 4"', unidad: 'metro', preguntas: ['¬øCu√°ntos metros?'] },
                'cobre_1/2': { nombre: 'Tubo Cobre 1/2"', unidad: 'metro', preguntas: ['¬øCu√°ntos metros?'] }
            }
        },
        'conexiones': {
            nombre: 'Conexiones y Accesorios',
            productos: {
                'codo_90_1/2': { nombre: 'Codo 90¬∞ 1/2"', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'codo_45_1/2': { nombre: 'Codo 45¬∞ 1/2"', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'tee_1/2': { nombre: 'Tee 1/2"', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'union_1/2': { nombre: 'Uni√≥n 1/2"', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'reduccion_1/2_a_3/4': { nombre: 'Reducci√≥n 1/2" a 3/4"', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'tap√≥n_1/2': { nombre: 'Tap√≥n 1/2"', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'adaptador_1/2': { nombre: 'Adaptador 1/2"', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] }
            }
        },
        'tinacos_cisternas': {
            nombre: 'Tinacos y Cisternas',
            productos: {
                'tinaco_450l': { nombre: 'Tinaco 450L', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'tinaco_600l': { nombre: 'Tinaco 600L', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'tinaco_1100l': { nombre: 'Tinaco 1100L', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'cisterna_2500l': { nombre: 'Cisterna 2500L', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'cisterna_5000l': { nombre: 'Cisterna 5000L', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] }
            }
        },
        'bombas': {
            nombre: 'Bombas de Agua',
            productos: {
                'bomba_1/2_hp': { nombre: 'Bomba 1/2 HP', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'bomba_1_hp': { nombre: 'Bomba 1 HP', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'bomba_presurizadora': { nombre: 'Bomba Presurizadora', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] }
            }
        },
        'valvulas_reguladores': {
            nombre: 'V√°lvulas y Reguladores',
            productos: {
                'valvula_compuerta_1/2': { nombre: 'V√°lvula Compuerta 1/2"', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'valvula_esfera_1/2': { nombre: 'V√°lvula Esfera 1/2"', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'regulador_gas': { nombre: 'Regulador Gas LP', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'mancuera_gas': { nombre: 'Mancuera para Gas 1.5m', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] }
            }
        },
        'accesorios': {
            nombre: 'Accesorios Varios',
            productos: {
                'pegamento_pvc': { nombre: 'Pegamento PVC', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'cinta_teflon': { nombre: 'Cinta Tefl√≥n', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] },
                'silicon_sellador': { nombre: 'Silicon Sellador', unidad: 'pieza', preguntas: ['¬øCu√°ntas piezas?'] }
            }
        }
    },

    // Iniciar cotizaci√≥n
    iniciar: (idUsuario) => {
        sistemaCotizacion.estado.set(idUsuario, {
            estado: sistemaCotizacion.estados.INICIO,
            productos: [],
            contexto: {},
            pasoActual: null,
            datosContacto: {},
            timestamp: new Date().toISOString()
        });

        return sistemaCotizacion.generarMensajeInicial();
    },

    // Procesar mensaje del usuario de forma no lineal
    procesar: (idUsuario, mensaje) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        if (!estado) return null;

        const input = mensaje.toLowerCase().trim();

        // Detectar comandos globales
        if (sistemaCotizacion.esComandoGlobal(input)) {
            return sistemaCotizacion.procesarComandoGlobal(idUsuario, input);
        }

        // Procesar seg√∫n estado actual
        switch (estado.estado) {
            case sistemaCotizacion.estados.INICIO:
                return sistemaCotizacion.procesarInicio(idUsuario, input);
            
            case sistemaCotizacion.estados.CAPTURANDO_PRODUCTOS:
                return sistemaCotizacion.procesarProductos(idUsuario, input);
            
            case sistemaCotizacion.estados.DETALLANDO_ESPECIFICACIONES:
                return sistemaCotizacion.procesarEspecificaciones(idUsuario, input);
            
            case sistemaCotizacion.estados.CONFIRMANDO_INFORMACION:
                return sistemaCotizacion.procesarConfirmacion(idUsuario, input);
            
            case sistemaCotizacion.estados.SOLICITANDO_CONTACTO:
                return sistemaCotizacion.procesarSolicitudContacto(idUsuario, input);
            
            case sistemaCotizacion.estados.ENVIANDO_CORREO:
                return sistemaCotizacion.procesarEnvioCorreo(idUsuario, input);
            
            default:
                return sistemaCotizacion.reiniciarFlujo(idUsuario);
        }
    },

    // ==================== CORRECCI√ìN CR√çTICA - PROCESAR INICIO MEJORADO ====================
    procesarInicio: (idUsuario, input) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        
        // DETECCI√ìN MEJORADA DE PROYECTOS - M√ÅS PATRONES Y M√ÅS FLEXIBLE
        const proyectos = {
            'ba√±o|ba√±os|sanitario|ba√±era|ducha|regadera|lavabo|excusado|inodoro': 'ba√±o',
            'cocina|cocinas|lavaplatos|fregadero|tarja|estufa|hornilla': 'cocina',
            'jard√≠n|jardin|riego|aspersores|plantas|cesped|cesp√©d': 'jard√≠n',
            'alberca|albercas|piscina|pileta|nataci√≥n': 'alberca',
            'casa|residencial|hogar|vivienda|departamento|apartamento': 'casa',
            'edificio|condominio|multifamiliar': 'edificio',
            'negocio|comercial|local|tienda|oficina|restaurante': 'comercial',
            'industria|industrial|fabrica|planta|taller': 'industrial'
        };

        // BUSCAR PROYECTO EN EL INPUT - M√ÅS INTELIGENTE
        let proyectoDetectado = null;
        for (const [patron, proyecto] of Object.entries(proyectos)) {
            if (new RegExp(patron, 'i').test(input)) {
                proyectoDetectado = proyecto;
                break;
            }
        }

        // SI DETECTA PROYECTO, SUGERIR PRODUCTOS ESPEC√çFICOS INMEDIATAMENTE
        if (proyectoDetectado) {
            estado.contexto.tipoProyecto = proyectoDetectado;
            estado.contexto.descripcion = input;
            estado.estado = sistemaCotizacion.estados.CAPTURANDO_PRODUCTOS;
            
            return sistemaCotizacion.sugerirProductosPorProyecto(proyectoDetectado);
        }

        // DETECTAR SI YA MENCIONA PRODUCTOS ESPEC√çFICOS
        const productosDetectados = sistemaCotizacion.extraerProductosMejorado(input);
        if (productosDetectados.length > 0) {
            estado.productos = productosDetectados;
            estado.estado = sistemaCotizacion.estados.CAPTURANDO_PRODUCTOS;
            return {
                tipo: "texto",
                contenido: `‚úÖ *Excelente, detect√© estos productos:*\n\n${sistemaCotizacion.generarResumenProductos(productosDetectados)}\n\n¬øQu√© m√°s necesitas agregar a tu cotizaci√≥n? O escribe "LISTO" para continuar.`
            };
        }

        // SI NO DETECTA NADA, PEDIR M√ÅS INFORMACI√ìN DE FORMA M√ÅS CLARA
        return {
            tipo: "texto",
            contenido: `ü§î *Veo que necesitas ayuda con un proyecto de plomer√≠a.*\n\nüí° *¬øPodr√≠as contarme m√°s detalles?*\n\nüè† **Ejemplos que funcionan:**\n‚Ä¢ "Es para un ba√±o completo"\n‚Ä¢ "Necesito materiales para cocina"  \n‚Ä¢ "Voy a instalar sistema de riego en el jard√≠n"\n‚Ä¢ "Es una reparaci√≥n de tuber√≠as"\n‚Ä¢ "Necesito tubos y conexiones para..."\n\nüîß **O menciona productos directos:**\n‚Ä¢ "15m tubo 1/2, 8 codos, 2 v√°lvulas"\n‚Ä¢ "Tinaco 1100L y bomba 1/2 HP"\n‚Ä¢ "Material para instalar regadera"\n\n*Tambi√©n puedes escribir "cancelar" si cambiaste de idea.*`
        };
    },

    // Procesar adici√≥n de productos - MEJORADO
    procesarProductos: (idUsuario, input) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        
        // Verificar si el usuario quiere terminar de agregar productos
        if (sistemaCotizacion.esFinalizacionProductos(input)) {
            if (estado.productos.length === 0) {
                return {
                    tipo: "texto",
                    contenido: "üìù *A√∫n no has agregado productos.*\n\n¬øQu√© materiales necesitas? Puedes:\n‚Ä¢ Elegir de las categor√≠as\n‚Ä¢ Decirme qu√© proyecto tienes\n‚Ä¢ Describir los productos espec√≠ficos"
                };
            }
            estado.estado = sistemaCotizacion.estados.CONFIRMANDO_INFORMACION;
            return sistemaCotizacion.solicitarConfirmacionFinal(estado);
        }

        // Extraer productos del mensaje - USANDO EL NUEVO M√âTODO MEJORADO
        const nuevosProductos = sistemaCotizacion.extraerProductosMejorado(input);
        
        if (nuevosProductos.length > 0) {
            // Combinar productos existentes con nuevos, evitando duplicados
            nuevosProductos.forEach(nuevoProducto => {
                const productoExistente = estado.productos.find(p => p.id === nuevoProducto.id);
                if (productoExistente) {
                    // Si ya existe, sumar la cantidad
                    productoExistente.cantidad += nuevoProducto.cantidad;
                } else {
                    // Si no existe, agregarlo
                    estado.productos.push(nuevoProducto);
                }
            });
            
            return {
                tipo: "texto",
                contenido: `‚úÖ *Productos agregados correctamente*\n\nüõí *Tu listado actual:*\n${sistemaCotizacion.generarResumenProductos(estado.productos)}\n\n¬øQu√© m√°s necesitas? O escribe "LISTO" para continuar.`
            };
        } else {
            // No se detectaron productos, ofrecer ayuda contextual
            if (estado.contexto.tipoProyecto) {
                return sistemaCotizacion.sugerirProductosPorProyecto(estado.contexto.tipoProyecto);
            } else {
                return sistemaCotizacion.generarOpcionesProductos(estado);
            }
        }
    },

    // ==================== NUEVO M√âTODO MEJORADO PARA EXTRAER PRODUCTOS ====================
    extraerProductosMejorado: (texto) => {
        const productos = [];
        const textoLower = texto.toLowerCase().trim();
        
        console.log("üîç Analizando texto para productos:", textoLower);
        
        // PATRONES MEJORADOS DE DETECCI√ìN - M√ÅS COMPLETOS Y FLEXIBLES
        const patronesProductos = [
            // Reguladores de gas con diferentes patrones
            { 
                patron: /(\d+)?\s*regulador(?:\s*(?:gas|lp))?/gi, 
                producto: 'regulador_gas', 
                cantidadDefault: 1 
            },
            { 
                patron: /regulador\s*(?:de\s*)?gas/gi, 
                producto: 'regulador_gas', 
                cantidadDefault: 1 
            },
            
            // Mancueras con diferentes patrones
            { 
                patron: /(\d+)?\s*mancuera(?:\s*(?:gas))?/gi, 
                producto: 'mancuera_gas', 
                cantidadDefault: 1 
            },
            { 
                patron: /mancuera\s*(?:de\s*)?gas/gi, 
                producto: 'mancuera_gas', 
                cantidadDefault: 1 
            },
            
            // Tubos PVC con diferentes medidas
            { 
                patron: /(\d+)?\s*metros?\s*(?:de\s*)?tubo\s*(?:pvc\s*)?(?:\d\/\d)?/gi, 
                producto: 'pvc_1/2', 
                cantidadDefault: 1 
            },
            { 
                patron: /tubo\s*pvc/gi, 
                producto: 'pvc_1/2', 
                cantidadDefault: 1 
            },
            
            // Conexiones y accesorios
            { 
                patron: /(\d+)?\s*(?:codo|tee|uni[√≥o]n|adaptador)/gi, 
                producto: 'union_1/2', 
                cantidadDefault: 1 
            },
            { 
                patron: /conexiones?/gi, 
                producto: 'union_1/2', 
                cantidadDefault: 1 
            },
            
            // V√°lvulas
            { 
                patron: /(\d+)?\s*v[√°a]lvula/gi, 
                producto: 'valvula_esfera_1/2', 
                cantidadDefault: 1 
            },
            
            // Tinacos y cisternas
            { 
                patron: /(\d+)?\s*tinaco/gi, 
                producto: 'tinaco_1100l', 
                cantidadDefault: 1 
            },
            { 
                patron: /(\d+)?\s*cisterna/gi, 
                producto: 'cisterna_2500l', 
                cantidadDefault: 1 
            },
            
            // Bombas
            { 
                patron: /(\d+)?\s*bomba/gi, 
                producto: 'bomba_1/2_hp', 
                cantidadDefault: 1 
            }
        ];

        // Buscar n√∫meros al inicio de patrones
        const numeroMatch = textoLower.match(/^(\d+)\s*(.+)/);
        let cantidadGeneral = 1;
        let textoSinNumero = textoLower;
        
        if (numeroMatch) {
            cantidadGeneral = parseInt(numeroMatch[1]);
            textoSinNumero = numeroMatch[2];
        }

        // Buscar productos usando patrones mejorados
        for (const {patron, producto, cantidadDefault} of patronesProductos) {
            const matches = [...textoLower.matchAll(patron)];
            if (matches.length > 0) {
                console.log("‚úÖ Encontrado:", producto, "en texto:", textoLower);
                
                // Intentar extraer cantidad espec√≠fica del match
                let cantidad = cantidadDefault;
                const match = matches[0];
                if (match[1]) { // Si hay un n√∫mero capturado en el grupo 1
                    cantidad = parseInt(match[1]);
                } else if (cantidadGeneral > 1) {
                    cantidad = cantidadGeneral;
                }
                
                // Verificar si el producto existe en el cat√°logo
                for (const [categoriaId, categoria] of Object.entries(sistemaCotizacion.categoriasProductos)) {
                    if (categoria.productos[producto]) {
                        productos.push({
                            id: producto,
                            nombre: categoria.productos[producto].nombre,
                            categoria: categoriaId,
                            cantidad: cantidad,
                            unidad: categoria.productos[producto].unidad,
                            especificaciones: {}
                        });
                        console.log("üì¶ Producto agregado:", producto, "cantidad:", cantidad);
                        break;
                    }
                }
            }
        }
        
        // B√∫squeda por palabras clave espec√≠ficas (como respaldo)
        const palabrasClave = {
            'regulador': {id: 'regulador_gas', cantidad: cantidadGeneral},
            'mancuera': {id: 'mancuera_gas', cantidad: cantidadGeneral},
            'tubo': {id: 'pvc_1/2', cantidad: cantidadGeneral},
            'tuber√≠a': {id: 'pvc_1/2', cantidad: cantidadGeneral},
            'tuberia': {id: 'pvc_1/2', cantidad: cantidadGeneral},
            'codo': {id: 'codo_90_1/2', cantidad: cantidadGeneral},
            'tee': {id: 'tee_1/2', cantidad: cantidadGeneral},
            'uni√≥n': {id: 'union_1/2', cantidad: cantidadGeneral},
            'union': {id: 'union_1/2', cantidad: cantidadGeneral},
            'adaptador': {id: 'adaptador_1/2', cantidad: cantidadGeneral},
            'v√°lvula': {id: 'valvula_esfera_1/2', cantidad: cantidadGeneral},
            'valvula': {id: 'valvula_esfera_1/2', cantidad: cantidadGeneral},
            'tinaco': {id: 'tinaco_1100l', cantidad: cantidadGeneral},
            'cisterna': {id: 'cisterna_2500l', cantidad: cantidadGeneral},
            'bomba': {id: 'bomba_1/2_hp', cantidad: cantidadGeneral}
        };
        
        for (const [palabra, info] of Object.entries(palabrasClave)) {
            if (textoLower.includes(palabra) && !productos.some(p => p.id === info.id)) {
                for (const [categoriaId, categoria] of Object.entries(sistemaCotizacion.categoriasProductos)) {
                    if (categoria.productos[info.id]) {
                        productos.push({
                            id: info.id,
                            nombre: categoria.productos[info.id].nombre,
                            categoria: categoriaId,
                            cantidad: info.cantidad,
                            unidad: categoria.productos[info.id].unidad,
                            especificaciones: {}
                        });
                        console.log("üîç Producto agregado por palabra clave:", info.id);
                        break;
                    }
                }
            }
        }
        
        console.log("üéØ Productos finales detectados:", productos);
        return productos;
    },

    // ==================== SISTEMA DE CORREO MEJORADO ====================
    procesarSolicitudContacto: (idUsuario, input) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        
        // Si es la primera vez que entra a este estado, solicitar nombre
        if (!estado.datosContacto.nombre) {
            estado.datosContacto.nombre = input;
            return {
                tipo: "texto",
                contenido: `‚úÖ *Nombre registrado:* ${input}\n\nüìß *Paso 2 de 3:* ¬øCu√°l es tu correo electr√≥nico?`
            };
        }
        
        // Si ya tiene nombre pero no email, solicitar email
        if (estado.datosContacto.nombre && !estado.datosContacto.email) {
            // Validaci√≥n b√°sica de email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(input)) {
                return {
                    tipo: "texto",
                    contenido: "‚ùå *Correo inv√°lido.* Por favor, ingresa un correo electr√≥nico v√°lido:"
                };
            }
            
            estado.datosContacto.email = input;
            return {
                tipo: "texto",
                contenido: `‚úÖ *Correo registrado:* ${input}\n\nüì± *Paso 3 de 3:* ¬øCu√°l es tu n√∫mero de tel√©fono?`
            };
        }
        
        // Si ya tiene nombre y email, solicitar tel√©fono
        if (estado.datosContacto.nombre && estado.datosContacto.email && !estado.datosContacto.telefono) {
            estado.datosContacto.telefono = input;
            estado.estado = sistemaCotizacion.estados.ENVIANDO_CORREO;
            
            // Enviar correo (simulado)
            return sistemaCotizacion.enviarCorreoCotizacion(idUsuario);
        }
        
        return sistemaCotizacion.generarErrorContacto();
    },

    procesarEnvioCorreo: (idUsuario, input) => {
        // Aqu√≠ procesar√≠amos la respuesta del usuario despu√©s del env√≠o
        // Por ahora, simplemente finalizamos
        sistemaCotizacion.estado.delete(idUsuario);
        return {
            tipo: "texto",
            contenido: `üéâ *¬°Cotizaci√≥n procesada exitosamente!*\n\nüìã *Resumen de tu solicitud:*\n‚Ä¢ Productos: ${sistemaCotizacion.generarResumenProductos(sistemaCotizacion.estado.get(idUsuario)?.productos || [])}\n‚Ä¢ Contacto: ${sistemaCotizacion.estado.get(idUsuario)?.datosContacto.nombre || 'No especificado'}\n\nüíº *Nuestro equipo te contactar√° en las pr√≥ximas 24 horas.*\n\n¬øNecesitas ayuda con algo m√°s?`
        };
    },

    enviarCorreoCotizacion: (idUsuario) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        
        // Simular env√≠o de correo
        console.log('üìß Enviando correo de cotizaci√≥n:', {
            productos: estado.productos,
            contacto: estado.datosContacto,
            timestamp: new Date().toISOString()
        });
        
        // Aqu√≠ ir√≠a la l√≥gica real de env√≠o de correo
        // Por ahora, simulamos el env√≠o
        
        return {
            tipo: "texto",
            contenido: `‚úÖ *¬°CORREO ENVIADO EXITOSAMENTE!*\n\nüì® *Se ha enviado tu cotizaci√≥n a:* ${estado.datosContacto.email}\n\nüìã *Resumen de tu cotizaci√≥n:*\n${sistemaCotizacion.generarResumenCompleto(estado)}\n\nüë§ *Tus datos de contacto:*\n‚Ä¢ Nombre: ${estado.datosContacto.nombre}\n‚Ä¢ Email: ${estado.datosContacto.email}\n‚Ä¢ Tel√©fono: ${estado.datosContacto.telefono}\n\nüíº *Nuestro equipo te contactar√° en las pr√≥ximas 24 horas para confirmar precios y disponibilidad.*\n\n¬øNecesitas hacer otra cotizaci√≥n o tienes alguna pregunta?`
        };
    },

    // ==================== M√âTODOS AUXILIARES MEJORADOS ====================
    generarResumenCompleto: (estado) => {
        let resumen = `üõí *PRODUCTOS SOLICITADOS:*\n`;
        estado.productos.forEach((producto, index) => {
            resumen += `${index + 1}. ${producto.nombre} - ${producto.cantidad} ${producto.unidad}\n`;
        });
        
        if (estado.contexto.tipoProyecto) {
            resumen += `\nüèóÔ∏è *PROYECTO:* ${estado.contexto.tipoProyecto}\n`;
        }
        if (estado.contexto.descripcion) {
            resumen += `üìù *DESCRIPCI√ìN:* ${estado.contexto.descripcion}\n`;
        }
        
        resumen += `\nüìÖ *FECHA DE SOLICITUD:* ${new Date().toLocaleDateString('es-MX')}`;
        
        return resumen;
    },

    solicitarConfirmacionFinal: (estado) => {
        return {
            tipo: "texto",
            contenido: `üéØ *CONFIRMACI√ìN FINAL DE COTIZACI√ìN*\n\n${sistemaCotizacion.generarResumenCompleto(estado)}\n\n¬øEst√° correcta tu cotizaci√≥n? Responde "S√ç" para continuar o "NO" para modificar.`
        };
    },

    procesarConfirmacion: (idUsuario, input) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        
        if (/(s[i√≠]|ok|correcto|listo|continuar)/i.test(input)) {
            estado.estado = sistemaCotizacion.estados.SOLICITANDO_CONTACTO;
            return {
                tipo: "texto",
                contenido: `‚úÖ *¬°Cotizaci√≥n confirmada!*\n\nüë§ *Paso 1 de 3:* Para enviarte la cotizaci√≥n, necesito algunos datos:\n\n¬øCu√°l es tu nombre completo?`
            };
        } else if (/(no|corregir|modificar|cambiar)/i.test(input)) {
            estado.estado = sistemaCotizacion.estados.CAPTURANDO_PRODUCTOS;
            return {
                tipo: "texto",
                contenido: `üîÑ *Vamos a modificar tu listado.*\n\nüõí *Actualmente tienes:*\n${sistemaCotizacion.generarResumenProductos(estado.productos)}\n\n¬øQu√© quieres hacer?\n‚Ä¢ Agregar m√°s productos\n‚Ä¢ Escribir "ELIMINAR [producto]" para quitar\n‚Ä¢ Escribir "LISTO" para finalizar`
            };
        }
        
        return sistemaCotizacion.solicitarConfirmacionFinal(estado);
    },

    // ==================== M√âTODOS EXISTENTES ACTUALIZADOS ====================
    extraerProductos: (texto) => {
        // M√©todo legacy - usar el nuevo extraerProductosMejorado
        return sistemaCotizacion.extraerProductosMejorado(texto);
    },

    generarOpcionesProductos: (estado) => {
        let mensaje = `üõí *¬øQu√© productos necesitas para tu proyecto?*\n\n`;
        
        mensaje += `üìã *Tienes 3 opciones f√°ciles:*\n\n`;
        mensaje += `üîπ **1. CONTARME TU PROYECTO**\n`;
        mensaje += `   "necesito materiales para un ba√±o"\n`;
        mensaje += `   "voy a instalar sistema de riego"\n`;
        mensaje += `   "requiero para cocina nueva"\n\n`;
        
        mensaje += `üîπ **2. MENCIONAR PRODUCTOS DIRECTOS**\n`;
        mensaje += `   "tubos pvc 1/2 y conexiones"\n`;
        mensaje += `   "tinaco 1100L + bomba 1/2 HP"\n`;
        mensaje += `   "10m tubo 3/4, 5 codos, 2 v√°lvulas"\n\n`;
        
        mensaje += `üîπ **3. ELEGIR CATEGOR√çA:*\n`;
        Object.entries(sistemaCotizacion.categoriasProductos).forEach(([id, categoria], index) => {
            mensaje += `   ${index + 1}. ${categoria.nombre}\n`;
        });
        
        mensaje += `\nüí° *Ejemplos que funcionan:*\n`;
        mensaje += `"Proyecto de ba√±o con tubos 1/2"\n`;
        mensaje += `"Necesito 15m tubo pvc 1/2, 8 codos 90, 1 v√°lvula"\n`;
        mensaje += `"Material para instalar tinaco y bomba"\n\n`;
        mensaje += `üõë *¬øCambiaste de idea?* Escribe "cancelar"`;
        
        return { tipo: "texto", contenido: mensaje };
    },

    sugerirProductosPorProyecto: (proyecto) => {
        const sugerencias = {
            'ba√±o': `üöΩ *¬°Perfecto! Para tu proyecto de BA√ëO, te recomiendo:*\n\nüì¶ **PRODUCTOS ESENCIALES:**\n‚Ä¢ Tubos PVC 1/2" para agua (15-20 metros)\n‚Ä¢ Conexiones 1/2" (8-10 codos 90¬∞, 4-5 tes)\n‚Ä¢ V√°lvulas de paso 1/2" (2-3 piezas)\n‚Ä¢ Tuber√≠a drenaje 3" (5-8 metros)\n‚Ä¢ Conexiones drenaje 3" (4 codos, 2 tes)\n‚Ä¢ Registro de acceso 4"\n\nüí° *Ejemplos f√°ciles:*\n"15m tubo 1/2, 8 codos, 2 v√°lvulas, 5m drenaje 3"\n"Material completo para ba√±o standard"\n"Necesito todo para instalar regadera y lavabo"\n\nüõí *Escribe los productos que necesitas o "LISTO" para continuar:*`,
            
            'cocina': `üç≥ *¬°Excelente! Para tu COCINA, necesitar√°s:*\n\nüì¶ **PRODUCTOS CLAVE:**\n‚Ä¢ Tubos PVC 1/2" agua fr√≠a/caliente (8-12 metros)\n‚Ä¢ Conexiones para lavaplatos (4-6 codos, 2 tes)\n‚Ä¢ V√°lvulas esf√©ricas 1/2" (2-3 piezas)\n‚Ä¢ Regulador de gas LP (1 pieza)\n‚Ä¢ Mancuera para gas 1.5m (1 pieza)\n‚Ä¢ Adaptadores y uniones\n\nüí° *Puedes decirme:*\n"Regulador gas + mancuera + tubos agua"\n"Material para instalar lavaplatos nuevo"\n"Necesito conexiones para cocina"\n\nüõí *Menciona los productos o escribe "LISTO":*`,
            
            'jard√≠n': `üåø *¬°Genial! Para JARD√çN/RIEGO, considera:*\n\nüì¶ **PRODUCTOS IDEALES:**\n‚Ä¢ Tubos PVC 3/4" para riego (20-30 metros)\n‚Ä¢ Conexiones para aspersores (6-8 codos, 4 tes)\n‚Ä¢ V√°lvulas de control 3/4" (2-3 piezas)\n‚Ä¢ Bomba de agua 1/2 HP (1 pieza)\n‚Ä¢ Tinaco 1100L (opcional)\n‚Ä¢ Reducciones y adaptadores\n\nüí° *Ejemplo pr√°ctico:*\n"Bomba 1/2 hp + 30m tubo 3/4 + v√°lvulas"\n"Sistema riego para jard√≠n mediano"\n\nüõí *¬øQu√© productos espec√≠ficos necesitas?*`
        };
        
        const mensaje = sugerencias[proyecto] || `üèóÔ∏è *Productos para ${proyecto}:*\n\n¬øQu√© materiales espec√≠ficos necesitas? Puedes mencionarlos directamente.`;
        
        return {
            tipo: "texto", 
            contenido: mensaje
        };
    },

    // Comandos globales
    esComandoGlobal: (input) => {
        const comandos = ['ver listado', 'qu√© llevo', 'mostrar productos', 'eliminar', 'quitar', 'cancelar', 'empezar over'];
        return comandos.some(comando => input.includes(comando));
    },

    procesarComandoGlobal: (idUsuario, input) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        
        if (input.includes('ver listado') || input.includes('qu√© llevo') || input.includes('mostrar productos')) {
            if (estado.productos.length === 0) {
                return { tipo: "texto", contenido: "üìù *Tu listado est√° vac√≠o.*\n\nAgrega productos describi√©ndolos o eligiendo categor√≠as." };
            }
            return {
                tipo: "texto",
                contenido: `üõí *Tu listado actual:*\n\n${sistemaCotizacion.generarResumenProductos(estado.productos)}\n\nüí° *Puedes:*\n‚Ä¢ Seguir agregando productos\n‚Ä¢ Escribir "LISTO" para continuar\n‚Ä¢ Escribir "ELIMINAR [producto]" para quitar algo`
            };
        }
        
        if (input.includes('eliminar') || input.includes('quitar')) {
            return sistemaCotizacion.procesarEliminacion(idUsuario, input);
        }
        
        if (input.includes('cancelar')) {
            sistemaCotizacion.estado.delete(idUsuario);
            return { tipo: "texto", contenido: "‚ùå *Cotizaci√≥n cancelada.* ¬øEn qu√© m√°s puedo ayudarte?" };
        }
        
        if (input.includes('empezar over')) {
            sistemaCotizacion.estado.delete(idUsuario);
            return sistemaCotizacion.iniciar(idUsuario);
        }
        
        return null;
    },

    // Generar resumen de productos
    generarResumenProductos: (productos) => {
        if (productos.length === 0) return "üìù *Listado vac√≠o*";
        
        let resumen = "";
        productos.forEach((producto, index) => {
            resumen += `${index + 1}. ${producto.nombre} - ${producto.cantidad} ${producto.unidad}\n`;
        });
        return resumen;
    },

    // Detectar finalizaci√≥n
    esFinalizacionProductos: (input) => {
        return /(listo|terminar|finalizar|ya est√°|eso es todo|continuar|siguiente)/i.test(input);
    },

    procesarEliminacion: (idUsuario, input) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        const productos = estado.productos;
        
        if (productos.length === 0) {
            return { tipo: "texto", contenido: "üìù *No hay productos para eliminar.*" };
        }

        // Buscar producto a eliminar
        for (let i = 0; i < productos.length; i++) {
            if (input.toLowerCase().includes(productos[i].nombre.toLowerCase())) {
                const eliminado = productos.splice(i, 1)[0];
                return {
                    tipo: "texto",
                    contenido: `‚ùå *Eliminado:* ${eliminado.nombre}\n\nüõí *Listado actual:*\n${sistemaCotizacion.generarResumenProductos(productos)}`
                };
            }
        }

        return {
            tipo: "texto",
            contenido: `‚ùå *No encontr√© ese producto.*\n\nüõí *Tu listado:*\n${sistemaCotizacion.generarResumenProductos(productos)}\n\nüí° *Escribe "eliminar [nombre del producto]"*`
        };
    },

    finalizarCotizacion: (idUsuario) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        
        const resumen = `üéâ *¬°COTIZACI√ìN COMPLETADA!*\n\nüõí *Tu listado final:*\n${sistemaCotizacion.generarResumenProductos(estado.productos)}\n\nüìß *¬øQu√© deseas hacer ahora?*\n\n1. üìã **VER DETALLES COMPLETOS**\n2. üìß **ENVIAR POR CORREO** \n3. üí¨ **CONTACTAR POR WHATSAPP**\n4. üîÑ **HACER OTRA COTIZACI√ìN**\n\n*Responde con el n√∫mero de tu elecci√≥n:*`;

        // NO eliminar el estado aqu√≠, ya que necesitamos los productos para el correo
        estado.estado = sistemaCotizacion.estados.CONFIRMANDO_INFORMACION;
        
        return {
            tipo: "texto",
            contenido: resumen
        };
    },

    generarErrorContacto: () => {
        return {
            tipo: "texto",
            contenido: "‚ùå *Error en el proceso de contacto.* Por favor, escribe 'cancelar' para empezar de nuevo."
        };
    },

    // ==================== FUNCIONES FALTANTES ACTUALIZADAS ====================
    generarMensajeInicial: () => {
        return {
            tipo: "texto",
            contenido: `üìã *¬°Perfecto! Iniciemos tu cotizaci√≥n.*\n\nüõí *¬øQu√© productos necesitas?*\n\nüìã *Puedes:*\n‚Ä¢ **Describir tu proyecto** (ej: "necesito para un ba√±o")\n‚Ä¢ **Mencionar productos espec√≠ficos** (ej: "tubos pvc 1/2 y conexiones")\n‚Ä¢ **Escribir "ver categor√≠as"** para ver opciones\n\nüí° *Ejemplos:*\n"Proyecto de ba√±o con tubos 1/2"\n"Necesito 10m tubo pvc 1/2, 5 codos 90"\n"Material para sistema de riego"\n\n*Tambi√©n puedes escribir "cancelar" en cualquier momento.*`
        };
    },

    reiniciarFlujo: (idUsuario) => {
        return sistemaCotizacion.iniciar(idUsuario);
    },

    solicitarDetallesProductos: (estado) => {
        if (estado.productos.length === 0) {
            return {
                tipo: "texto",
                contenido: "üìù *A√∫n no has agregado productos.*\n\n¬øQu√© materiales necesitas?"
            };
        }
        
        return {
            tipo: "texto",
            contenido: `‚úÖ *Productos agregados.* ¬øNecesitas algo m√°s?\n\nüõí *Tu listado:*\n${sistemaCotizacion.generarResumenProductos(estado.productos)}\n\nEscribe "LISTO" para continuar o agrega m√°s productos.`
        };
    },

    procesarEspecificaciones: (idUsuario, input) => {
        const estado = sistemaCotizacion.estado.get(idUsuario);
        // Por ahora, simplificamos y vamos a confirmaci√≥n
        estado.estado = sistemaCotizacion.estados.CONFIRMANDO_INFORMACION;
        return sistemaCotizacion.procesarConfirmacion(idUsuario, input);
    }
};

// Detector de intenci√≥n de cotizaci√≥n
sistemaCotizacion.detectarIntencionCotizacion = (input) => {
    const patrones = [
        /(cotizaci[√≥o]n|presupuesto|precio|cost[o√≥])/i,
        /(necesito|quiero|solicito).*(material|producto|tubo|tuber[i√≠]a|tinaco)/i,
        /(listado|lista|pedido|orden).*(producto|material)/i,
        /(envi[ae]r|mandar).*(correo|email)/i,
        /(agregar|a√±adir).*(producto|material)/i
    ];
    return patrones.some(patron => patron.test(input));
};

// ==================== SISTEMA DE CONTEXTO Y MEMORIA ====================
export const contextoConversacion = new Map();

export const gestionarContexto = (idUsuario, mensaje, respuesta) => {
    if (!contextoConversacion.has(idUsuario)) {
        contextoConversacion.set(idUsuario, []);
    }
    
    const historial = contextoConversacion.get(idUsuario);
    historial.push({ 
        usuario: mensaje, 
        bot: respuesta,
        timestamp: new Date().toISOString()
    });
    
    // Mantener solo los √∫ltimos 6 mensajes para no sobrecargar
    if (historial.length > 6) {
        historial.shift();
    }
};

export const obtenerContexto = (idUsuario) => {
    return contextoConversacion.get(idUsuario) || [];
};

export const limpiarContexto = (idUsuario) => {
    contextoConversacion.delete(idUsuario);
};

// ==================== CONFIGURACI√ìN ====================
export const WIT_AI_TOKEN = "PU6SJVTN7UBA5TJOAUTVZWBZIHUVNXJF";
export const WIT_API_VERSION = "20250502";
export const GEMINI_API_KEY = "AIzaSyD5G2WoPDgnXC9lT4lpPPyPGchb712hg2w";
export const UNSPLASH_ACCESS_KEY = "wtEzyz_eYhND7kjWxBmLj_DQILUePcx-nxXVdv3t4tc";
export const WHATSAPP_NUMERO_EMPRESA = "+5215543225189";
export const WHATSAPP_ENABLED = true;

// ==================== BASE DE CONOCIMIENTOS ====================
export const knowledgeBase = {
    saludos: [
        "¬°Hola! Soy tu asistente de TUBCON. ¬øEn qu√© puedo ayudarte hoy?",
        "¬°Buen d√≠a! ¬øNecesitas ayuda con productos de plomer√≠a?",
        "¬°Hola! Expertos en tubos, conexiones y accesorios de PVC. ¬øEn qu√© te puedo ayudar?"
    ],
    respuestas: {
        'tubcon|empresa|qui√©nes son|qui√©n es': "TUBCON es una empresa especializada en la distribuci√≥n de material de plomer√≠a, trabajando con las mejores marcas del mercado.",
        'productos|qu√© venden|qu√© tienen|cat√°logo': "Ofrecemos tubos, conexiones, accesorios de PVC, tinacos, cisternas, reguladores de gas, mancueras y bombas de agua de las mejores marcas. Puedes ver nuestro cat√°logo en la secci√≥n de productos.",
        'ubicaci√≥n|d√≥nde est√°n|local|direcci√≥n|localizaci√≥n|mapa|como llegar|direcci√≥n exacta|ubican': "üìç *Nuestra ubicaci√≥n:*\nAvenida M√©xico No., Puxtla 25, Teotihuacan Centro, 55805 Teotihuac√°n de Arista, M√©x.",
        'contacto|tel√©fono|whatsapp|email|correo': "Puedes contactarnos a trav√©s de la secci√≥n de contacto o llamarnos al 55-43-22-51-89.",

        'pvc|tubos|tuber√≠as|conexiones|accesorios': "Contamos con una amplia variedad de productos de PVC para todos tus proyectos de plomer√≠a. Visita nuestra secci√≥n de productos para m√°s informaci√≥n.",

        // TINACOS Y CISTERNAS
        'tinacos|tinaco|tanques|tanque agua|almacenamiento agua': "En TUBCON manejamos tinacos de las mejores marcas: ROTOPLAS, IUSA y BLACKPLUS. Tenemos desde 110 litros hasta 1100 litros en diferentes modelos.",
        'cisternas|cisterna|dep√≥sitos|dep√≥sito agua|reservorios': "Contamos con cisternas desde 2,500 hasta 10,000 litros de marcas como ROTOPLAS, IUSA y BLACKPLUS. Ideales para almacenamiento de agua potable.",
        'rotoplas|marca rotoplas': "ROTOPLAS es una de nuestras principales marcas. Tenemos tinacos de 1100 litros, cisternas de 2800, 5000 litros y biodigestores autolimpiables.",
        'iusa|marca iusa': "IUSA nos ofrece tinacos tricapa de 110 litros, tinacos slim de 1100 litros, y cisternas de 2,500, 5,000 y 10,000 litros.",
        'black plus|blackplus|marca black': "BLACK PLUS tiene tinacos de 1100 litros en colores beige y negro, incluyendo el modelo 'bala' para espacios reducidos.",
        'biodigestor|biodigestores|autolimpiable': "Contamos con biodigestores autolimpiables de 1300 litros, perfectos para tratamiento de aguas residuales.",

        // MANCUERAS PARA GAS L.P.
        'mancueras|mancuera|cable gas|cables de gas|cable de gas|manguera gas|conexi√≥n gas|lp gas|caracter√≠sticas|especificaciones': "En TUBCON manejamos mancueras para gas L.P. de alta calidad con conexi√≥n 3/8\" flare/flare en diferentes longitudes.",
        'mancuera gas lp|gas lp|propano': "Mancueras para gas L.P. con caracter√≠sticas: tuercas de lat√≥n, espigas de lat√≥n, f√©rulas de acero inoxidable. Temperatura de uso: -2 a 50¬∞C. Presi√≥n m√°xima: 0.07 KCF/CM (7 KPA).",
        'longitud mancuera|medidas mancuera|tama√±os mancuera': "Longitudes disponibles: 60 cm, 1.0 m, 1.5 m, 2.0 m, 3.0 m, 4.0 m, 5.0 m.",

        // REGULADORES DE GAS Y AGUA
        'reguladores|regulador|regulador gas|regulador agua|v√°lvulas reguladoras': "En TUBCON manejamos reguladores de gas y agua de las marcas IUSA y CMS. Tenemos modelos de 1 v√≠a, 2 v√≠as, baja presi√≥n y alta presi√≥n.",
        'regulador iusa|marca iusa': "IUSA: Regulador R2001 IUSA 323986, Regulador 102 series, y diversos modelos de la serie 2403.",
        'regulador cms|marca cms': "CMS: Modelos LOBO, Regulador 1757 sin man√≥metro, y reguladores de diferentes especificaciones.",

        // BOMBAS IUSA
        'bombas|bomba|bomba agua|bomba iusa|sistema bombeo': "En TUBCON manejamos bombas de agua de la marca IUSA, incluyendo bombas perif√©ricas, centrifugas, presurizadoras, autocebantes y para pozo profundo.",
        'bomba perif√©rica|perif√©rica iusa|1/2 hp perif√©rica': "Bomba perif√©rica IUSA de 1/2 HP, ideal para presurizaci√≥n de agua en hogares y peque√±as instalaciones.",

        // RESPUESTAS GENERALES
        'precios|costos|cotizaci√≥n|valor': "Para obtener informaci√≥n sobre precios y cotizaciones, te recomendamos contactarnos directamente para brindarte la mejor atenci√≥n personalizada.",
        'distribuidor|mayoreo|revender|comerciante': "Si est√°s interesado en ser distribuidor, cont√°ctanos para brindarte informaci√≥n sobre nuestros programas de distribution.",
        'gracias|bye|adi√≥s|chao|hasta luego': "¬°De nada! Estoy aqu√≠ para ayudarte cuando lo necesites. ¬°Que tengas un excelente d√≠a!",
        'ayuda|soporte|asistencia|problema': "Para soporte t√©cnico puedes contactarnos a trav√©s de la secci√≥n de contacto.",
        'horario|abren|cierran|horas|hora abren|hora cierran|atenci√≥n|cu√°ndo abren|cu√°ndo cierran|d√≠as abren': "Nuestro horario de atenci√≥n es de lunes a viernes de 8:30 a 18:00 y s√°bados de 8:00 a 15:00.",
        'env√≠os|entrega|shipping|delivery': "Ofrecemos servicios de entrega a domicilio. Consulta los detalles en la secci√≥n de contacto.",
        'garant√≠a|devoluci√≥n|reembolso': "Todos nuestros productos cuentan con garant√≠a del fabricante. Para devoluciones o reembolsos, cont√°ctanos directamente.",
    },

    comandosImagenes: {
        'muestra|mu√©starme|ver|mostrar|imagen|foto|fotograf√≠a|gr√°fico|diagrama|visual|c√≥mo se ve|aspecto|quiero ver|necesito ver|deseo ver': true
    },

    terminosBusquedaImagenes: {
        'tubos pvc|tuber√≠as pvc|tubo pvc|tuber√≠a pvc|pvc tubo|pvc tuber√≠a': "PVC pipes plumbing installation",
        'tubos|tuber√≠as|tuber√≠a|tubo|ca√±os|ca√±er√≠as': "water pipes plumbing system",
        'conexiones pvc|accesorios pvc|conexi√≥n pvc|accesorio pvc': "PVC fittings connectors plumbing",
        'codos pvc|codo pvc|codos 90|curvas pvc': "PVC elbows 90 degree fittings",
        'v√°lvulas pvc|v√°lvula pvc|llaves pvc|v√°lvula agua': "PVC valves water control plumbing",
        'plomer√≠a|fontaner√≠a|instalaci√≥n hidr√°ulica|sistema plomer√≠a': "plumbing system installation tools",
    },

    respuestasGenericas: [
        "No estoy seguro de entender. ¬øPodr√≠as reformular tu pregunta?",
        "¬øTe refieres a alg√∫n producto o servicio espec√≠fico de TUBCON?",
        "Puedo ayudarte con informaci√≥n sobre nuestros productos, ubicaci√≥n o contacto. ¬øQu√© necesitas?",
        "Como asistente de TUBCON, puedo ayudarte con informaci√≥n sobre nuestros productos de plomer√≠a. ¬øEn qu√© te puedo ayudar?"
    ]
};

// ==================== SISTEMA AVANZADO DE RECOMENDACI√ìN T√âCNICA CON F√ìRMULAS ====================
export const sistemaRecomendacionAvanzado = async (mensaje) => {
    const input = mensaje.toLowerCase().trim();
    
    // 1. SISTEMA DE RECOMENDACI√ìN PARA TINACOS CON F√ìRMULAS
    if (/(tinaco|tanque).*(personas|familia|gente|capacidad|recomienda|cu√°l|qu√©)/i.test(input)) {
        return await recomendarTinacoAvanzado(input);
    }
    
    // 2. SISTEMA PARA CISTERNAS CON C√ÅLCULOS DE CONSUMO
    if (/(cisterna|dep√≥sito|reservorio).*(personas|d√≠as|consumo|capacidad)/i.test(input)) {
        return await recomendarCisternaAvanzado(input);
    }
    
    // 3. SISTEMA PARA BOMBAS CON C√ÅLCULOS HIDR√ÅULICOS
    if (/(bomba|bombas).*(casa|pisos|altura|presi√≥n|flujo)/i.test(input)) {
        return await recomendarBombaAvanzado(input);
    }
    
    // 4. SISTEMA PARA TUBER√çAS CON C√ÅLCULOS DE CAUDAL
    if (/(tubo|tuber√≠a|pvc).*(casa|ba√±os|di√°metro|caudal|presi√≥n)/i.test(input)) {
        return await recomendarTuberiaAvanzado(input);
    }
    
    // 5. COMPARATIVO T√âCNICO ENTRE MARCAS
    if (/(diferencia|comparar|mejor|cu√°l).*(iusa|rotoplas|black plus)/i.test(input)) {
        return await compararMarcasTecnicamente(input);
    }
    
    return null;
};

// ==================== F√ìRMULAS Y C√ÅLCULOS T√âCNICOS ====================
export const formulasTecnicas = {
    // Consumo diario de agua por persona (litros/d√≠a)
    consumoPorPersona: (tipoVivienda) => {
        const consumos = {
            'econ√≥mico': 80,      // Uso b√°sico
            'est√°ndar': 120,      // Uso normal residencial
            'confort': 150,       // Uso con jard√≠n/limpieza
            'lujo': 200          // Uso intensivo
        };
        return consumos[tipoVivienda] || 120;
    },
    
    // C√°lculo de capacidad de tinaco basado en consumo
    capacidadTinaco: (personas, diasReserva = 2, tipoVivienda = 'est√°ndar') => {
        const consumoDiario = formulasTecnicas.consumoPorPersona(tipoVivienda);
        return Math.ceil(personas * consumoDiario * diasReserva);
    },
    
    // C√°lculo de capacidad de cisterna (considerando 5-7 d√≠as)
    capacidadCisterna: (personas, tipoVivienda = 'est√°ndar') => {
        const consumoDiario = formulasTecnicas.consumoPorPersona(tipoVivienda);
        return Math.ceil(personas * consumoDiario * 6); // 6 d√≠as de reserva
    },
    
    // C√°lculo de caballaje de bomba basado en altura y caudal
    potenciaBomba: (alturaMetros, caudalLPM) => {
        // F√≥rmula simplificada: HP = (Altura √ó Caudal) / (4500 √ó Eficiencia)
        const eficiencia = 0.6; // 60% de eficiencia t√≠pica
        return Math.ceil((alturaMetros * caudalLPM) / (4500 * eficiencia) * 10) / 10;
    },
    
    // C√°lculo de caudal requerido basado en puntos de uso
    caudalRequerido: (numBa√±os, numCocinas, tieneJard√≠n = false) => {
        let caudal = 0;
        caudal += numBa√±os * 15;      // 15 LPM por ba√±o
        caudal += numCocinas * 10;    // 10 LPM por cocina
        caudal += tieneJard√≠n ? 20 : 0; // 20 LPM para riego
        
        return Math.max(caudal, 25); // M√≠nimo 25 LPM
    }
};

// ==================== RECOMENDACI√ìN AVANZADA DE TINACOS ====================
export const recomendarTinacoAvanzado = async (input) => {
    const matchPersonas = input.match(/(\d+)\s*personas?/i) || input.match(/para\s*(\d+)/i);
    const numPersonas = matchPersonas ? parseInt(matchPersonas[1]) : 4; // Default 4 personas
    
    // Detectar tipo de vivienda
    let tipoVivienda = 'est√°ndar';
    if (input.includes('econ√≥mico') || input.includes('b√°sico')) tipoVivienda = 'econ√≥mico';
    if (input.includes('confort') || input.includes('jard√≠n')) tipoVivienda = 'confort';
    if (input.includes('lujo') || input.includes('grande')) tipoVivienda = 'lujo';
    
    // Calcular capacidad requerida
    const capacidadRequerida = formulasTecnicas.capacidadTinaco(numPersonas, 2, tipoVivienda);
    const consumoDiario = formulasTecnicas.consumoPorPersona(tipoVivienda) * numPersonas;
    
    // RECOMENDACIONES POR MARCA CON F√ìRMULAS ESPEC√çFICAS
    const recomendaciones = [
        {
            marca: "IUSA",
            modelo: capacidadRequerida <= 450 ? "Tricapa 450L" : "Slim 1100L",
            capacidad: capacidadRequerida <= 450 ? 450 : 1100,
            ventajaTecnica: "‚úÖ *Capas reforzadas:* 3 capas de polietileno\n‚úÖ *UV Protection:* Resistente 10+ a√±os\n‚úÖ *Precio/Calidad:* Mejor relaci√≥n del mercado",
            formula: `C√°lculo: ${numPersonas} personas √ó ${formulasTecnicas.consumoPorPersona(tipoVivienda)}L/d√≠a √ó 2 d√≠as = ${capacidadRequerida}L`,
            duracionEstimada: `Duraci√≥n: ${Math.round((capacidadRequerida <= 450 ? 450 : 1100) / consumoDiario * 10) / 10} d√≠as en uso normal`,
            precioRelativo: "üí≤üí≤ (Econ√≥mico)"
        },
        {
            marca: "ROTOPLAS",
            modelo: capacidadRequerida <= 600 ? "Vertical 600L" : "Vertical 1100L",
            capacidad: capacidadRequerida <= 600 ? 600 : 1100,
            ventajaTecnica: "‚úÖ *Garant√≠a:* 15 a√±os contra defectos\n‚úÖ *Certificaci√≥n:* Norma NMX-E-226-CNCP-2019\n‚úÖ *Dise√±o:* Exclusivo sistema de cierre",
            formula: `Reserva: ${Math.round((capacidadRequerida <= 600 ? 600 : 1100) / consumoDiario * 10) / 10} d√≠as de autonom√≠a`,
            duracionEstimada: `Vida √∫til: 15+ a√±os con mantenimiento b√°sico`,
            precioRelativo: "üí≤üí≤üí≤ (Premium)"
        },
        {
            marca: "BLACK PLUS",
            modelo: capacidadRequerida <= 550 ? "Compacto 550L" : "Bala 1100L",
            capacidad: capacidadRequerida <= 550 ? 550 : 1100,
            ventajaTecnica: "‚úÖ *Compacto:* Ideal espacios reducidos\n‚úÖ *UV Max:* Protecci√≥n solar reforzada\n‚úÖ *Instalaci√≥n:* Sistema f√°cil 4 pasos",
            formula: `Eficiencia: ${Math.round((capacidadRequerida <= 550 ? 550 : 1100) / numPersonas)}L por persona`,
            duracionEstimada: `Rendimiento: Optimizado para ${tipoVivienda === 'confort' ? 'uso intensivo' : 'uso residencial'}`,
            precioRelativo: "üí≤üí≤üí≤ (Intermedio)"
        }
    ];

    let respuesta = `üö∞ *AN√ÅLISIS T√âCNICO PARA ${numPersonas} PERSONAS* üö∞\n\n`;
    respuesta += `üìä *Par√°metros calculados:*\n`;
    respuesta += `‚Ä¢ Personas: ${numPersonas}\n`;
    respuesta += `‚Ä¢ Tipo vivienda: ${tipoVivienda}\n`;
    respuesta += `‚Ä¢ Consumo diario: ${consumoDiario}L\n`;
    respuesta += `‚Ä¢ Capacidad recomendada: ${capacidadRequerida}L\n\n`;
    respuesta += `üèÜ *RECOMENDACIONES T√âCNICAS:*\n\n`;

    recomendaciones.forEach((rec, index) => {
        respuesta += `*${rec.marca} - ${rec.modelo} (${rec.capacidad}L)*\n`;
        respuesta += `${rec.ventajaTecnica}\n`;
        respuesta += `üßÆ ${rec.formula}\n`;
        respuesta += `‚è±Ô∏è ${rec.duracionEstimada}\n`;
        respuesta += `${rec.precioRelativo}\n`;
        
        if (index < recomendaciones.length - 1) {
            respuesta += `\n${'‚îÄ'.repeat(40)}\n\n`;
        }
    });

    respuesta += `\nüí° *RECOMENDACI√ìN FINAL:* `;
    if (tipoVivienda === 'econ√≥mico') {
        respuesta += `IUSA por mejor relaci√≥n precio-calidad`;
    } else if (tipoVivienda === 'confort') {
        respuesta += `BLACK PLUS por dise√±o y eficiencia`;
    } else {
        respuesta += `ROTOPLAS por durabilidad y garant√≠a`;
    }

    return { tipo: "texto", contenido: respuesta };
};

// ==================== RECOMENDACI√ìN AVANZADA DE CISTERNAS ====================
export const recomendarCisternaAvanzado = async (input) => {
    const matchPersonas = input.match(/(\d+)\s*personas?/i) || input.match(/para\s*(\d+)/i);
    const numPersonas = matchPersonas ? parseInt(matchPersonas[1]) : 4;
    
    const capacidadRequerida = formulasTecnicas.capacidadCisterna(numPersonas);
    const consumoMensual = formulasTecnicas.consumoPorPersona('est√°ndar') * numPersonas * 30;

    const recomendaciones = [
        {
            marca: "IUSA",
            modelo: capacidadRequerida <= 5000 ? "Rectangular 2500L" : "Rectangular 10000L",
            capacidad: capacidadRequerida <= 5000 ? 2500 : 10000,
            ventajas: [
                "‚úÖ *Estructura:* Refuerzos laterales cada 40cm",
                "‚úÖ *Instalaci√≥n:* Sistema modular f√°cil ensamble",
                "‚úÖ *Mantenimiento:* Tapa de 60cm para acceso f√°cil"
            ],
            calculo: `Autonom√≠a: ${Math.round((capacidadRequerida <= 5000 ? 2500 : 10000) / (numPersonas * 120) * 10) / 10} d√≠as`,
            aplicacion: capacidadRequerida <= 5000 ? "Familiar (4-6 personas)" : "Comercial (10+ personas)"
        },
        {
            marca: "ROTOPLAS",
            modelo: capacidadRequerida <= 6000 ? "Circular 2800L" : "Circular 10000L",
            capacidad: capacidadRequerida <= 6000 ? 2800 : 10000,
            ventajas: [
                "‚úÖ *Dise√±o:* Forma circular optimizada",
                "‚úÖ *Durabilidad:* 20 a√±os de vida √∫til",
                "‚úÖ *Tecnolog√≠a:* Sistema Rotocontrol"
            ],
            calculo: `Reserva: ${Math.round((capacidadRequerida <= 6000 ? 2800 : 10000) / consumoMensual * 30)} d√≠as mensuales`,
            aplicacion: capacidadRequerida <= 6000 ? "Residencial est√°ndar" : "Grandes consumos"
        },
        {
            marca: "BLACK PLUS",
            modelo: capacidadRequerida <= 5500 ? "Horizontal 3000L" : "Horizontal 8000L",
            capacidad: capacidadRequerida <= 5500 ? 3000 : 8000,
            ventajas: [
                "‚úÖ *Espacio:* Dise√±o bajo para techos bajos",
                "‚úÖ *UV:* Protecci√≥n solar integrada",
                "‚úÖ *Instalaci√≥n:* 30% m√°s r√°pida"
            ],
            calculo: `Eficiencia: ${Math.round((capacidadRequerida <= 5500 ? 3000 : 8000) / numPersonas)}L/persona`,
            aplicacion: capacidadRequerida <= 5500 ? "Espacios reducidos" : "Capacidad media"
        }
    ];

    let respuesta = `üíß *AN√ÅLISIS T√âCNICO DE CISTERNAS* üíß\n\n`;
    respuesta += `üìà *C√°lculos para ${numPersonas} personas:*\n`;
    respuesta += `‚Ä¢ Consumo mensual estimado: ${consumoMensual}L\n`;
    respuesta += `‚Ä¢ Capacidad recomendada: ${capacidadRequerida}L\n`;
    respuesta += `‚Ä¢ Autonom√≠a ideal: 5-7 d√≠as\n\n`;

    recomendaciones.forEach(rec => {
        respuesta += `üè∑Ô∏è *${rec.marca} ${rec.modelo}*\n`;
        respuesta += `üì¶ Capacidad: ${rec.capacidad}L\n`;
        respuesta += `üéØ Aplicaci√≥n: ${rec.aplicacion}\n`;
        rec.ventajas.forEach(v => respuesta += `${v}\n`);
        respuesta += `üßÆ ${rec.calculo}\n\n`;
    });

    respuesta += `‚öñÔ∏è *TABLA COMPARATIVA:*\n`;
    respuesta += `\`\`\`\n`;
    respuesta += `Marca       | Cap. (L) | Vida √ötil | Instalaci√≥n\n`;
    respuesta += `${'‚îÄ'.repeat(45)}\n`;
    respuesta += `IUSA        | 2500-10K | 15 a√±os   | Media (2 personas)\n`;
    respuesta += `ROTOPLAS    | 2800-10K | 20 a√±os   | Compleja (3 personas)\n`;
    respuesta += `BLACK PLUS  | 3000-8K  | 15 a√±os   | F√°cil (1-2 personas)\n`;
    respuesta += `\`\`\`\n\n`;
    respuesta += `üí° *Selecci√≥n inteligente:* Elige seg√∫n espacio, presupuesto y tiempo de instalaci√≥n.`;

    return { tipo: "texto", contenido: respuesta };
};

// ==================== RECOMENDACI√ìN AVANZADA DE BOMBAS ====================
export const recomendarBombaAvanzado = async (input) => {
    const matchPisos = input.match(/(\d+)\s*pisos?/i) || input.match(/para\s*(\d+).*piso/i);
    const numPisos = matchPisos ? parseInt(matchPisos[1]) : 1;
    
    const matchBa√±os = input.match(/(\d+)\s*ba√±os?/i);
    const numBa√±os = matchBa√±os ? parseInt(matchBa√±os[1]) : 2;
    
    // C√°lculos t√©cnicos
    const alturaMetros = numPisos * 3 + 3; // 3m por piso + 3m adicional
    const caudalRequerido = formulasTecnicas.caudalRequerido(numBa√±os, 1, input.includes('jard√≠n'));
    const potenciaRequerida = formulasTecnicas.potenciaBomba(alturaMetros, caudalRequerido);

    const recomendaciones = [
        {
            tipo: "Centr√≠fuga",
            marca: "IUSA",
            modelo: `C-${potenciaRequerida <= 0.75 ? "075" : "100"}`,
            potencia: potenciaRequerida <= 0.75 ? "0.75 HP" : "1.0 HP",
            aplicacion: "Cisterna a tinaco",
            eficiencia: "75%",
            calculo: `HP = (${alturaMetros}m √ó ${caudalRequerido}LPM) / (4500 √ó 0.6) = ${potenciaRequerida} HP`,
            ventajas: ["‚úÖ Alto caudal", "‚úÖ Bajo mantenimiento", "‚úÖ Precio competitivo"]
        },
        {
            tipo: "Presurizadora",
            marca: "IUSA",
            modelo: `P-${numBa√±os <= 2 ? "02" : "03"}`,
            potencia: numBa√±os <= 2 ? "0.5 HP" : "0.75 HP",
            aplicacion: "Mejorar presi√≥n existente",
            eficiencia: "80%",
            calculo: `Caudal: ${numBa√±os} ba√±os √ó 15LPM = ${caudalRequerido} LPM`,
            ventajas: ["‚úÖ Autom√°tica", "‚úÖ Silenciosa", "‚úÖ Ahorro energ√≠a"]
        },
        {
            tipo: "Perif√©rica",
            marca: "IUSA",
            modelo: `PER-${potenciaRequerida <= 1 ? "100" : "150"}`,
            potencia: potenciaRequerida <= 1 ? "1.0 HP" : "1.5 HP",
            aplicacion: "Riego y sistemas",
            eficiencia: "70%",
            calculo: `Altura m√°xima: ${alturaMetros + 5}m (incluye succi√≥n)`,
            ventajas: ["‚úÖ Autocebante", "‚úÖ Vers√°til", "‚úÖ Multiusos"]
        }
    ];

    let respuesta = `‚ö° *AN√ÅLISIS T√âCNICO DE BOMBAS* ‚ö°\n\n`;
    respuesta += `üìê *Par√°metros de dise√±o:*\n`;
    respuesta += `‚Ä¢ Pisos: ${numPisos} (${alturaMetros}m altura)\n`;
    respuesta += `‚Ä¢ Ba√±os: ${numBa√±os}\n`;
    respuesta += `‚Ä¢ Caudal requerido: ${caudalRequerido} LPM\n`;
    respuesta += `‚Ä¢ Potencia calculada: ${potenciaRequerida} HP\n\n`;

    respuesta += `üîß *RECOMENDACIONES IUSA T√âCNICAS:*\n\n`;

    recomendaciones.forEach(rec => {
        respuesta += `üîπ *${rec.tipo} ${rec.marca} ${rec.modelo}*\n`;
        respuesta += `‚ö° Potencia: ${rec.potencia} | Eficiencia: ${rec.eficiencia}\n`;
        respuesta += `üéØ Aplicaci√≥n: ${rec.aplicacion}\n`;
        rec.ventajas.forEach(v => respuesta += `${v}\n`);
        respuesta += `üßÆ ${rec.calculo}\n\n`;
    });

    respuesta += `üìä *TABLA DE SELECCI√ìN T√âCNICA:*\n`;
    respuesta += `\`\`\`\n`;
    respuesta += `Tipo         | Pisos | Ba√±os | HP    | Caudal\n`;
    respuesta += `${'‚îÄ'.repeat(50)}\n`;
    respuesta += `Centr√≠fuga   | 1-2   | 2-3   | 0.75  | 40-60 LPM\n`;
    respuesta += `Presurizadora| 1-3   | 2-4   | 0.5-1 | 20-35 LPM\n`;
    respuesta += `Perif√©rica   | 1-4   | 3-6   | 1-2   | 50-80 LPM\n`;
    respuesta += `\`\`\`\n\n`;
    respuesta += `üí° *Recomendaci√≥n final:* Para ${numPisos} pisos y ${numBa√±os} ba√±os, `;
    respuesta += `la bomba ${recomendaciones[0].tipo} ${recomendaciones[0].modelo} es √≥ptima.`;

    return { tipo: "texto", contenido: respuesta };
};

// ==================== RECOMENDACI√ìN AVANZADA DE TUBER√çAS ====================
export const recomendarTuberiaAvanzado = async (input) => {
    const matchBa√±os = input.match(/(\d+)\s*ba√±os?/i);
    const numBa√±os = matchBa√±os ? parseInt(matchBa√±os[1]) : 2;
    
    const recomendaciones = {
        'agua_fria': {
            titulo: "üö∞ *SISTEMA DE AGUA FR√çA*",
            recomendaciones: [
                {
                    diametro: '1/2"',
                    aplicacion: "Ba√±os individuales, lavabos",
                    caudal: "Hasta 15 LPM",
                    materiales: "PVC Schedule 40, CPVC"
                },
                {
                    diametro: '3/4"',
                    aplicacion: "2-3 ba√±os, cocina",
                    caudal: "Hasta 30 LPM", 
                    materiales: "PVC Schedule 40, Cobre Tipo M"
                },
                {
                    diametro: '1"',
                    aplicacion: "4+ ba√±os, sistema completo",
                    caudal: "Hasta 60 LPM",
                    materiales: "PVC Schedule 80, Cobre Tipo L"
                }
            ]
        },
        'drenaje': {
            titulo: "üöΩ *SISTEMA DE DRENAJE*",
            recomendaciones: [
                {
                    diametro: '2"',
                    aplicacion: "Lavabos, regaderas, lavadoras",
                    capacidad: "Hasta 3 ba√±os",
                    materiales: "PVC DWV, ABS"
                },
                {
                    diametro: '3"', 
                    aplicacion: "Inodoros, drenaje principal",
                    capacidad: "Hasta 6 ba√±os",
                    materiales: "PVC DWV, ABS"
                },
                {
                    diametro: '4"',
                    aplicacion: "Drenaje principal edificios",
                    capacidad: "6+ ba√±os",
                    materiales: "PVC DWV, Hierro Fundido"
                }
            ]
        }
    };

    let respuesta = `üîß *RECOMENDACIONES T√âCNICAS DE TUBER√çAS* üîß\n\n`;
    respuesta += `üìä *Para ${numBa√±os} ba√±os:*\n\n`;

    Object.values(recomendaciones).forEach(sistema => {
        respuesta += `${sistema.titulo}\n\n`;
        sistema.recomendaciones.forEach(rec => {
            respuesta += `üìè *Di√°metro ${rec.diametro}:*\n`;
            respuesta += `üéØ Aplicaci√≥n: ${rec.aplicacion}\n`;
            respuesta += `üíß ${rec.caudal || rec.capacidad}\n`;
            respuesta += `üè≠ Materiales: ${rec.materiales}\n\n`;
        });
    });

    respuesta += `üí° *CONSIDERACIONES T√âCNICAS:*\n`;
    respuesta += `‚Ä¢ Presi√≥n m√≠nima requerida: 2.0 kg/cm¬≤\n`;
    respuesta += `‚Ä¢ Velocidad m√°xima recomendada: 2.5 m/s\n`;
    respuesta += `‚Ä¢ Pendiente drenaje: 2% m√≠nimo\n`;
    respuesta += `‚Ä¢ Juntas: Cemento solvente para PVC\n`;

    return { tipo: "texto", contenido: respuesta };
};

// ==================== COMPARATIVO T√âCNICO ENTRE MARCAS ====================
export const compararMarcasTecnicamente = async (input) => {
    let producto = "tinacos";
    if (input.includes('cisterna')) producto = "cisternas";
    if (input.includes('bomba')) producto = "bombas";
    if (input.includes('regulador')) producto = "reguladores";

    const comparativa = {
        'tinacos': {
            iusa: {
                ventajas: ["Precio competitivo", "Amplia distribuci√≥n", "Garant√≠a 10 a√±os"],
                especificaciones: ["3 capas de polietileno", "Resistente a UV", "Temperatura -10¬∞C a 50¬∞C"],
                vidaUtil: "15 a√±os",
                precio: "$$",
                eficiencia: "85%"
            },
            rotoplas: {
                ventajas: ["Reconocimiento de marca", "Garant√≠a 15 a√±os", "Sistema exclusivo cierre"],
                especificaciones: ["4 capas reforzadas", "Certificaci√≥n NMX", "Auto-limpieza"],
                vidaUtil: "20 a√±os",
                precio: "$$$",
                eficiencia: "90%"
            },
            blackplus: {
                ventajas: ["Dise√±o compacto", "Instalaci√≥n f√°cil", "Protecci√≥n UV Max"],
                especificaciones: ["Forma ergon√≥mica", "Bajo perfil", "Optimizado espacios"],
                vidaUtil: "15 a√±os",
                precio: "$$",
                eficiencia: "88%"
            }
        },
        'cisternas': {
            iusa: {
                ventajas: ["Sistema modular", "Refuerzos cada 40cm", "Precio accesible"],
                especificaciones: ["Capacidad 2500-10000L", "Instalaci√≥n 2 personas", "Mantenimiento f√°cil"],
                vidaUtil: "15 a√±os",
                precio: "$$$",
                eficiencia: "82%"
            },
            rotoplas: {
                ventajas: ["Dise√±o circular", "Vida √∫til extendida", "Tecnolog√≠a Rotocontrol"],
                especificaciones: ["Capacidad 2800-10000L", "Estructura optimizada", "Auto-nivelaci√≥n"],
                vidaUtil: "20 a√±os",
                precio: "$$$$",
                eficiencia: "92%"
            },
            blackplus: {
                ventajas: ["Dise√±o horizontal", "Para espacios bajos", "Instalaci√≥n r√°pida"],
                especificaciones: ["Capacidad 3000-8000L", "30% m√°s r√°pido", "UV integrado"],
                vidaUtil: "15 a√±os",
                precio: "$$$",
                eficiencia: "85%"
            }
        }
    };

    const data = comparativa[producto];
    if (!data) return null;

    let respuesta = `üèÜ *COMPARATIVO T√âCNICO - ${producto.toUpperCase()}* üèÜ\n\n`;

    Object.entries(data).forEach(([marca, info]) => {
        respuesta += `üî∏ *${marca.toUpperCase()}*\n`;
        respuesta += `‚≠ê Ventajas: ${info.ventajas.join(', ')}\n`;
        respuesta += `üìã Especificaciones:\n`;
        info.especificaciones.forEach(esp => respuesta += `   ‚Ä¢ ${esp}\n`);
        respuesta += `‚è±Ô∏è Vida √∫til: ${info.vidaUtil} | Precio: ${info.precio}\n`;
        respuesta += `üìä Eficiencia: ${info.eficiencia}\n\n`;
    });

    respuesta += `üìà *AN√ÅLISIS COMPARATIVO:*\n`;
    respuesta += `‚Ä¢ *Mejor precio:* IUSA\n`;
    respuesta += `‚Ä¢ *Mayor durabilidad:* ROTOPLAS\n`;
    respuesta += `‚Ä¢ *Mejor dise√±o:* BLACK PLUS\n`;
    respuesta += `‚Ä¢ *Relaci√≥n precio-calidad:* IUSA\n\n`;
    respuesta += `üí° *Conclusi√≥n t√©cnica:* Selecciona seg√∫n prioridades de durabilidad, presupuesto y espacio disponible.`;

    return { tipo: "texto", contenido: respuesta };
};

// ==================== FUNCIONES DE B√öSQUEDA DE IM√ÅGENES ====================
export const extraerTerminoEspecifico = (input) => {
    const palabrasClave = [
        'tubos', 'tuber√≠as', 'codos', 'tes', 'v√°lvulas', 'conexiones',
        'accesorios', 'pegamento', 'cemento', 'drenaje', 'instalaci√≥n',
        'pvc', 'plomer√≠a', 'fontaner√≠a', 'sistema', 'materiales'
    ];

    const palabras = input.toLowerCase().split(/\s+/);
    for (const palabra of palabras) {
        if (palabrasClave.includes(palabra)) {
            return palabra;
        }
    }
    return null;
};

export const detectarSolicitudImagenes = (input) => {
    const comandos = Object.keys(knowledgeBase.comandosImagenes);
    return comandos.some(cmd => {
        const patrones = cmd.split('|');
        return patrones.some(patron => new RegExp(patron, 'i').test(input));
    });
};

export const obtenerTerminoBusquedaImagenes = (input) => {
    const terminoEspecifico = extraerTerminoEspecifico(input);

    for (const [claves, term] of Object.entries(knowledgeBase.terminosBusquedaImagenes)) {
        const patrones = claves.split('|');
        for (const patron of patrones) {
            if (new RegExp(`\\b${patron}\\b`, 'i').test(input)) {
                return term;
            }
        }
    }

    if (terminoEspecifico) {
        for (const [claves, term] of Object.entries(knowledgeBase.terminosBusquedaImagenes)) {
            if (claves.includes(terminoEspecifico)) {
                return term;
            }
        }
    }

    return null;
};

export const buscarImagenesUnsplash = async (query) => {
    if (!query) return [];

    try {
        const searchQuery = encodeURIComponent(query);
        const response = await fetch(
            `https://api.unsplash.com/search/photos?query=${searchQuery}&per_page=6&orientation=squarish`, {
            headers: {
                'Authorization': `Client-ID ${UNSPLASH_ACCESS_KEY}`,
                'Accept-Version': 'v1'
            }
        });

        if (!response.ok) return [];

        const data = await response.json();
        if (data.results && data.results.length > 0) {
            return data.results.map(photo => ({
                url: photo.urls.regular,
                title: `Productos PVC - ${query}`,
                photographer: photo.user.name,
                source: "Unsplash",
                original: photo.links.html,
                description: photo.alt_description || `Imagen de ${query}`
            }));
        }
        return [];
    } catch (error) {
        console.error("Error con Unsplash:", error);
        return [];
    }
};

export const buscarImagenesMultiples = async (query) => {
    if (!query) return [];
    const imagenesUnsplash = await buscarImagenesUnsplash(query);
    return imagenesUnsplash.slice(0, 4);
};

export const formatearRespuestaConImagenes = (imagenes, terminoBusqueda, mensajeOriginal) => {
    if (imagenes.length === 0) {
        return {
            tipo: "texto",
            contenido: `üì∏ No se encontraron im√°genes espec√≠ficas para "${mensajeOriginal}".\n\nüí° *Sugerencias:*\n- "muestra tubos PVC"\n- "ver conexiones PVC"\n- "imagen de v√°lvulas"\n- "c√≥mo se ven los codos PVC"`
        };
    }

    const mensaje = `üì∏ *Im√°genes relacionadas con "${mensajeOriginal}":*\n\nEstas son im√°genes de referencia para productos similares:`;
    return {
        tipo: "imagenes",
        contenido: mensaje,
        imagenes: imagenes,
        terminoBusqueda: terminoBusqueda,
        mensajeOriginal: mensajeOriginal
    };
};

// ==================== FUNCIONES DE IA ====================
export const consultarWitAI = async (mensaje) => {
    try {
        const url = `https://api.wit.ai/message?v=${WIT_API_VERSION}&q=${encodeURIComponent(mensaje)}`;
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${WIT_AI_TOKEN}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) return false;
        const data = await response.json();

        if (data.intents && data.intents.length > 0) {
            const intent = data.intents[0].name;
            const confidence = data.intents[0].confidence;

            if (confidence > 0.6) {
                switch (intent) {
                    case 'saludo':
                        return { tipo: "texto", contenido: "¬°Hola! Soy tu asistente de TUBCON. ¬øEn qu√© puedo ayudarte hoy?" };
                    case 'despedida':
                        return { tipo: "texto", contenido: "¬°Hasta luego! No dudes en volver si necesitas m√°s ayuda con nuestros productos de plomer√≠a." };
                    case 'ayuda':
                        return { tipo: "texto", contenido: "Puedo ayudarte con informaci√≥n sobre nuestros productos de tuber√≠a, conexiones y accesorios de PVC. ¬øQu√© necesitas saber?" };
                    default:
                        const respuestaEntidades = procesarEntidadesWit(data.entities);
                        return { tipo: "texto", contenido: respuestaEntidades || "Entendido. ¬øNecesitas algo m√°s espec√≠fico sobre nuestros productos de plomer√≠a?" };
                }
            }
        }
        return false;
    } catch (error) {
        console.error("Error con Wit.ai:", error);
        return false;
    }
};

export const consultarGemini = async (mensaje) => {
    try {
        const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;
        const prompt = `Eres un especialista t√©cnico de TUBCON, empresa de materiales de plomer√≠a. 
        Responde de manera t√©cnica pero clara sobre productos de PVC, tinacos, cisternas, reguladores de gas, 
        bombas de agua y materiales de plomer√≠a. S√© espec√≠fico y proporciona informaci√≥n t√©cnica √∫til.
        
        Pregunta del cliente: ${mensaje}
        
        Responde en espa√±ol con informaci√≥n precisa y t√©cnica.`;

        const payload = {
            contents: [{ parts: [{ text: prompt }] }],
            generationConfig: {
                maxOutputTokens: 500,
                temperature: 0.3,
                topP: 0.8,
                topK: 40
            }
        };

        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) return false;
        const data = await response.json();

        if (data.candidates && data.candidates[0]?.content?.parts[0]?.text) {
            return { tipo: "texto", contenido: data.candidates[0].content.parts[0].text };
        }
        return false;
    } catch (error) {
        console.error("Error con Gemini:", error);
        return false;
    }
};

export const procesarEntidadesWit = (entities) => {
    if (!entities) return null;
    if (entities.producto) {
        const producto = entities.producto[0].value.toLowerCase();
        switch (producto) {
            case 'tubos': case 'tuber√≠as': case 'tubo':
                return "Contamos con una amplia variedad de tubos de PVC en diferentes medidas y especificaciones. ¬øTe interesa alg√∫n di√°metro en particular?";
            case 'conexiones': case 'conexi√≥n': case 'accesorios':
                return "Tenemos todo tipo de conexiones y accesorios de PVC para tus proyectos de plomer√≠a. ¬øQu√© tipo de conexi√≥n necesitas?";
            case 'pvc':
                return "Trabajamos con los mejores materiales de PVC del mercado. ¬øNecesitas informaci√≥n sobre alg√∫n producto espec√≠fico?";
        }
    }
    return null;
};

// ==================== FUNCIONES DE DETECCI√ìN ====================
export const detectarPreguntaTecnica = (input) => {
    const patronesTecnicos = [
        /qu[√©e]\s+es\s+/i, /definici[√≥o]n\s+de\s+/i, /significado\s+de\s+/i,
        /c[√≥o]mo\s+funciona\s+/i, /para\s+qu[√©e]\s+sirve\s+/i,
        /caracter[√≠i]sticas\s+de\s+/i, /especificaciones\s+de\s+/i,
        /ventajas\s+de\s+/i, /beneficios\s+de\s+/i, /propiedades\s+de\s+/i,
        /qu[√©e]\s+significa\s+/i
    ];
    return patronesTecnicos.some(patron => patron.test(input));
};

export const detectarConsultaDefinicion = (input) => {
    const palabrasDefinicion = [
        'qu√© es', 'que es', 'definici√≥n', 'definicion', 'significado',
        'qu√© significa', 'que significa', 'explica', 'explicaci√≥n',
        'qu√© son', 'que son', 'definir', 'concepto'
    ];
    return palabrasDefinicion.some(palabra => input.includes(palabra));
};

export const debeIgnorarBaseLocal = (input) => {
    const preguntasParaIA = [
        /qu[√©e]\s+es\s+.+/i, /definici[√≥o]n\s+de\s+.+/i,
        /c[√≥o]mo\s+funciona\s+.+/i, /para\s+qu[√©e]\s+sirve\s+.+/i,
        /explica\s+.+/i, /qu[√©e]\s+significa\s+.+/i
    ];
    return preguntasParaIA.some(patron => patron.test(input));
};

export const esRespuestaMuyGenerica = (contenido) => {
    const respuestasGenericas = [
        "entendido", "puedo ayudarte", "qu√© necesitas saber",
        "en qu√© te puedo ayudar", "contamos con", "visita nuestra secci√≥n",
        "te recomendamos contactarnos", "tenemos una amplia variedad"
    ];
    const contenidoLower = contenido.toLowerCase();
    return respuestasGenericas.some(resp => contenidoLower.includes(resp));
};

// ==================== SISTEMA DE FLUJOS CONVERSACIONALES ====================
export const flujosConversacion = {
    cotizacion: {
        pasos: [
            { 
                pregunta: "üìã *Paso 1 de 4:* ¬øPara qu√© tipo de proyecto necesitas los materiales?\n\nüí° *Ejemplos:* residencial, comercial, industrial, reparaci√≥n, construcci√≥n nueva", 
                campo: "tipoProyecto" 
            },
            { 
                pregunta: "üìã *Paso 2 de 4:* ¬øQu√© productos espec√≠ficamente necesitas?\n\nüí° *Ejemplos:* tubos PVC 1/2\", tinaco 1100L, conexiones para drenaje", 
                campo: "productos" 
            },
            { 
                pregunta: "üìã *Paso 3 de 4:* ¬øQu√© cantidades aproximadas requieres?\n\nüí° *Ejemplos:* 10 metros, 5 piezas, 1 tinaco", 
                campo: "cantidades" 
            },
            { 
                pregunta: "üìã *Paso 4 de 4:* ¬øPara cu√°ndo necesitas los materiales?", 
                campo: "fecha" 
            }
        ],
        estado: new Map(),
        completado: "¬°Gracias por la informaci√≥n! üìû Te contactaremos en breve para brindarte una cotizaci√≥n personalizada. ¬øNecesitas ayuda con algo m√°s?"
    }
};

export const gestionarFlujoConversacional = (idUsuario, mensaje) => {
    // Verificar si estamos en medio de alg√∫n flujo
    for (const [nombreFlujo, config] of Object.entries(flujosConversacion)) {
        if (config.estado.has(idUsuario)) {
            return procesarPasoFlujo(idUsuario, mensaje, nombreFlujo);
        }
    }
    
    // Si no hay flujo activo, detectar si debemos iniciar uno
    const intencion = detectarIntencionMejorada(mensaje);
    
    if (intencion === 'solicitudCotizacion') {
        return iniciarFlujo(idUsuario, 'cotizacion');
    }
    
    return null;
};

export const iniciarFlujo = (idUsuario, nombreFlujo) => {
    const flujo = flujosConversacion[nombreFlujo];
    flujo.estado.set(idUsuario, {
        pasoActual: 0,
        datos: {},
        flujo: nombreFlujo
    });
    
    return flujo.pasos[0].pregunta;
};

export const procesarPasoFlujo = (idUsuario, mensaje, nombreFlujo) => {
    const flujo = flujosConversacion[nombreFlujo];
    const estado = flujo.estado.get(idUsuario);
    
    // Guardar respuesta del paso actual
    const pasoActual = estado.pasoActual;
    const campo = flujo.pasos[pasoActual].campo;
    estado.datos[campo] = mensaje;
    
    // Avanzar al siguiente paso
    estado.pasoActual++;
    
    if (estado.pasoActual < flujo.pasos.length) {
        return flujo.pasos[estado.pasoActual].pregunta;
    } else {
        // Flujo completado
        flujo.estado.delete(idUsuario);
        console.log(`üì¶ Flujo ${nombreFlujo} completado:`, estado.datos);
        return flujo.completado;
    }
};

export const cancelarFlujo = (idUsuario) => {
    for (const [nombreFlujo, config] of Object.entries(flujosConversacion)) {
        if (config.estado.has(idUsuario)) {
            config.estado.delete(idUsuario);
            return `‚ùå Hemos cancelado la solicitud. ¬øEn qu√© m√°s puedo ayudarte?`;
        }
    }
    return null;
};

// ==================== DETECCI√ìN MEJORADA DE INTENCIONES ====================
export const detectarIntencionMejorada = (input) => {
    const intenciones = {
        consultaProducto: {
            patrones: [
                /(?:quiero|necesito|busco|deseo|me interesa).*(?:tubo|tuber√≠a|conexi√≥n|v√°lvula|tinaco|cisterna|bomba|regulador|mancuera|pvc)/i,
                /(?:qu√©|cu√°l).*(?:tienen|ofrecen|venden|manejan).*(?:para|de)/i,
            ],
            prioridad: 1
        },
        solicitudCotizacion: {
            patrones: [
                /(?:precio|costo|cotizaci[√≥o]n|valor|cu[√°a]nto).*(?:tubo|tuber√≠a|producto|material)/i,
                /(?:cu[√°a]nto cuesta|qu[√©e] precio|qu[√©e] valor).*/i,
                /(?:presupuesto|cotizar|presupuestar).*/i,
            ],
            prioridad: 2
        },
        solicitudTecnica: {
            patrones: [
                /(?:c[√≥o]mo|de qu[√©e] manera).*(?:instalar|funciona|usar|aplicar)/i,
                /(?:caracter[√≠i]sticas|especificaciones|medidas|dimensiones).*/i,
                /(?:para qu[√©e] sirve|qu[√©e] es|funcionamiento).*/i,
            ],
            prioridad: 1
        }
    };

    let mejorIntencion = null;
    let mejorPuntaje = 0;

    for (const [intencion, config] of Object.entries(intenciones)) {
        for (const patron of config.patrones) {
            if (patron.test(input)) {
                if (config.prioridad > mejorPuntaje) {
                    mejorPuntaje = config.prioridad;
                    mejorIntencion = intencion;
                }
                break;
            }
        }
    }

    return mejorIntencion;
};

// ==================== AN√ÅLISIS DE SENTIMIENTO ====================
export const analizarSentimiento = (texto) => {
    const positivos = ['gracias', 'excelente', 'bueno', 'perfecto', 'genial', 'ayuda', 'buen', 'agradecido', 'agradezco'];
    const negativos = ['problema', 'error', 'mal', 'terrible', 'horrible', 'queja', 'molesto', 'enojado', 'p√©simo'];
    
    let puntaje = 0;
    const palabras = texto.toLowerCase().split(/\s+/);
    
    palabras.forEach(palabra => {
        if (positivos.includes(palabra)) puntaje++;
        if (negativos.includes(palabra)) puntaje--;
    });
    
    return puntaje > 0 ? 'positivo' : puntaje < 0 ? 'negativo' : 'neutral';
};

// ==================== PROCESAMIENTO LOCAL MEJORADO ====================
export const procesarRespuestaLocal = async (mensaje) => {
    const input = mensaje.toLowerCase().trim();

    // 1. Verificar si es una pregunta que debe ignorar la base local
    if (debeIgnorarBaseLocal(input)) {
        return {
            tipo: "texto",
            contenido: knowledgeBase.respuestasGenericas[0]
        };
    }

    // 2. Verificar si el usuario pide im√°genes
    if (detectarSolicitudImagenes(input)) {
        const terminoBusqueda = obtenerTerminoBusquedaImagenes(input);

        if (terminoBusqueda) {
            const imagenes = await buscarImagenesMultiples(terminoBusqueda);
            return formatearRespuestaConImagenes(imagenes, terminoBusqueda, mensaje);
        } else {
            return {
                tipo: "texto",
                contenido: `üì∏ Veo que quieres ver im√°genes. ¬øDe qu√© producto espec√≠fico necesitas ver fotos?\n\nüí° *Ejemplos:*\n- "muestra tubos PVC"\n- "ver conexiones de drenaje"\n- "imagen de v√°lvulas PVC"\n- "c√≥mo se ven los codos 90 grados"`
            };
        }
    }

    // 3. Detecci√≥n para horarios
    const horarioPatterns = [
        /\b(horario|horarios|hora)\b/,
        /\b(a qu√© hora|cu√°ndo)\s*(abren|abrimos|cierran|cerramos)\b/,
        /\b(abren|cierran)\s*(a\s*qu√©\s*hora|cu√°ndo)\b/,
        /\b(d√≠as\s*de\s*atenci√≥n|d√≠as\s*abierto)\b/,
        /\b(atenci√≥n\s*al\s*p√∫blico|horario\s*de\s*atenci√≥n)\b/
    ];

    for (const pattern of horarioPatterns) {
        if (pattern.test(input)) {
            return {
                tipo: "texto",
                contenido: "Nuestro horario de atenci√≥n es de lunes a viernes de 8:30 a 18:00 y s√°bados de 8:00 a 15:00."
            };
        }
    }

    // 4. Detecci√≥n para ubicaci√≥n
    const ubicacionPatterns = [
        /\b(ubicaci√≥n|ubicacion|donde\s*estan|d√≥nde\s*est√°n|localizaci√≥n|localizacion)\b/,
        /\b(direcci√≥n|direccion|dirreci√≥n|dirreccion)\b/,
        /\b(como\s*llegar|c√≥mo\s*llegar|mapa|google\s*maps|waze)\b/,
        /\b(direcci√≥n\s*exacta|direccion\s*exacta)\b/,
        /\b(teotihuac√°n|teotihuacan|teotihuacan\s*de\s*arista)\b/,
        /\b(avenida\s*m√©xico|avenida\s*mexico|puxtla)\b/
    ];

    for (const pattern of ubicacionPatterns) {
        if (pattern.test(input)) {
            return {
                tipo: "texto",
                contenido: "üìç *Nuestra ubicaci√≥n:*\nAvenida M√©xico No., Puxtla 25, Teotihuacan Centro, 55805 Teotihuac√°n de Arista, M√©x."
            };
        }
    }

    // 5. B√∫squeda normal en el conocimiento base
    for (const [claves, respuesta] of Object.entries(knowledgeBase.respuestas)) {
        const patrones = claves.split('|');
        for (const patron of patrones) {
            if (new RegExp(patron, 'i').test(input)) {
                return {
                    tipo: "texto",
                    contenido: respuesta
                };
            }
        }
    }

    // 6. Respuesta gen√©rica
    return {
        tipo: "texto",
        contenido: knowledgeBase.respuestasGenericas[
            Math.floor(Math.random() * knowledgeBase.respuestasGenericas.length)
        ]
    };
};

// ==================== FUNCI√ìN PRINCIPAL MEJORADA ====================
export const procesarMensaje = async (mensaje, idUsuario = 'default') => {
    try {
        const input = mensaje.toLowerCase().trim();
        
        // === SISTEMA DE COTIZACI√ìN MEJORADO ===
    
        // 1. Detectar inicio de cotizaci√≥n (ALTA PRIORIDAD)
        if ((/(cotizaci[√≥o]n|presupuesto|listado|pedido|materiales)/i.test(input) || 
             /(necesito|quiero|solicito).*(material|producto|tubo|tuber[i√≠]a|tinaco|cisterna|bomba|v√°lvula|conexi√≥n)/i.test(input)) && 
            !sistemaCotizacion.estado.has(idUsuario)) {
            const respuesta = sistemaCotizacion.iniciar(idUsuario);
            gestionarContexto(idUsuario, mensaje, respuesta.contenido);
            return renderizarRespuestaEnChat(respuesta);
        }
        
        // 2. Procesar cotizaci√≥n existente (M√ÅXIMA PRIORIDAD)
        if (sistemaCotizacion.estado.has(idUsuario)) {
            const respuesta = sistemaCotizacion.procesar(idUsuario, mensaje);
            if (respuesta) {
                gestionarContexto(idUsuario, mensaje, respuesta.contenido);
                return renderizarRespuestaEnChat(respuesta);
            }
        }
        
        // 3. Detectar n√∫meros para opciones de men√∫
        if (/^[1234]$/.test(input)) {
            const estado = sistemaCotizacion.estado.get(idUsuario);
            if (estado && estado.estado === sistemaCotizacion.estados.CONFIRMANDO_INFORMACION) {
                switch (input) {
                    case '1': // Ver detalles completos
                        return renderizarRespuestaEnChat({
                            tipo: "texto",
                            contenido: `üìã *DETALLES COMPLETOS DE TU COTIZACI√ìN*\n\n${sistemaCotizacion.generarResumenCompleto(estado)}\n\nüí° *¬øQu√© deseas hacer?*\nEscribe "S√ç" para continuar con el env√≠o o "NO" para modificar.`
                        });
                    case '2': // Enviar por correo
                        estado.estado = sistemaCotizacion.estados.SOLICITANDO_CONTACTO;
                        return renderizarRespuestaEnChat({
                            tipo: "texto",
                            contenido: `‚úÖ *¬°Excelente elecci√≥n!*\n\nüë§ *Paso 1 de 3:* Para enviarte la cotizaci√≥n, necesito algunos datos:\n\n¬øCu√°l es tu nombre completo?`
                        });
                    case '3': // Contactar por WhatsApp
                        return renderizarRespuestaEnChat({
                            tipo: "texto",
                            contenido: `üí¨ *CONTACTO POR WHATSAPP*\n\nPuedes contactarnos directamente al:\nüì± *+52 55 4322 5189*\n\n¬°Estaremos encantados de atenderte! üéØ\n\n¬øNecesitas algo m√°s?`
                        });
                    case '4': // Hacer otra cotizaci√≥n
                        sistemaCotizacion.estado.delete(idUsuario);
                        return renderizarRespuestaEnChat(sistemaCotizacion.iniciar(idUsuario));
                }
            }
        }

        // 4. Detectar cancelaci√≥n de flujo
        if (/(cancelar|detener|parar|no quiero|olv√≠dalo)/i.test(input)) {
            const respuestaCancelacion = cancelarFlujo(idUsuario);
            if (respuestaCancelacion) {
                gestionarContexto(idUsuario, mensaje, respuestaCancelacion);
                return renderizarRespuestaEnChat({ tipo: "texto", contenido: respuestaCancelacion });
            }
        }
        
        // 5. Gestionar flujos conversacionales
        const respuestaFlujo = gestionarFlujoConversacional(idUsuario, mensaje);
        if (respuestaFlujo) {
            gestionarContexto(idUsuario, mensaje, respuestaFlujo);
            return renderizarRespuestaEnChat({ tipo: "texto", contenido: respuestaFlujo });
        }
        
        // 6. Verificar si es solicitud de recomendaci√≥n t√©cnica avanzada
        const recomendacionAvanzada = await sistemaRecomendacionAvanzado(mensaje);
        if (recomendacionAvanzada) {
            gestionarContexto(idUsuario, mensaje, recomendacionAvanzada.contenido);
            return renderizarRespuestaEnChat(recomendacionAvanzada);
        }
        
        // 7. Detectar saludos
        if (/(hola|buen|saludos|qu√© tal|buenas|hello|hi)/i.test(input)) {
            const contexto = obtenerContexto(idUsuario);
            const saludo = contexto.length > 0 
                ? "¬°Hola de nuevo! ¬øEn qu√© m√°s puedo ayudarte?"
                : knowledgeBase.saludos[Math.floor(Math.random() * knowledgeBase.saludos.length)];
            
            gestionarContexto(idUsuario, mensaje, saludo);
            return renderizarRespuestaEnChat({ tipo: "texto", contenido: saludo });
        }
        
        // 8. Detectar despedidas
        if (/(gracias|adi[√≥o]s|chao|bye|hasta luego|nos vemos|chao)/i.test(input)) {
            const sentimiento = analizarSentimiento(input);
            let despedida = "¬°De nada! Estoy aqu√≠ para ayudarte cuando lo necesites. ¬°Que tengas un excelente d√≠a! üåü";
            
            if (sentimiento === 'positivo') {
                despedida = "¬°Gracias a ti! üòä Fue un gusto ayudarte. ¬°Vuelve pronto!";
            } else if (sentimiento === 'negativo') {
                despedida = "Lamento no haber podido ayudarte mejor. üòî ¬øHay algo m√°s en lo que pueda asistirte?";
            }
            
            gestionarContexto(idUsuario, mensaje, despedida);
            return renderizarRespuestaEnChat({ tipo: "texto", contenido: despedida });
        }
        
        // 9. DETECTAR SI ES UNA PREGUNTA T√âCNICA QUE DEBE IR DIRECTAMENTE A LA IA
        const esPreguntaTecnica = detectarPreguntaTecnica(input);
        const esConsultaDefinicion = detectarConsultaDefinicion(input);
        
        if (esPreguntaTecnica || esConsultaDefinicion) {
            console.log("üîç Pregunta t√©cnica detectada, consultando IAs...");
            
            // Intentar primero con Gemini (mejor para respuestas t√©cnicas)
            const respuestaGemini = await consultarGemini(mensaje);
            if (respuestaGemini && !esRespuestaMuyGenerica(respuestaGemini.contenido)) {
                gestionarContexto(idUsuario, mensaje, respuestaGemini.contenido);
                return renderizarRespuestaEnChat(respuestaGemini);
            }
            
            // Si Gemini falla, intentar con Wit.ai
            const respuestaWit = await consultarWitAI(mensaje);
            if (respuestaWit) {
                gestionarContexto(idUsuario, mensaje, respuestaWit.contenido);
                return renderizarRespuestaEnChat(respuestaWit);
            }
        }
        
        // 10. PROCESAR LOCALMENTE (solo si no es pregunta t√©cnica)
        const respuestaLocal = await procesarRespuestaLocal(mensaje);
        
        // 11. Si la respuesta local es gen√©rica, consultar IAs
        const esRespuestaGenerica = knowledgeBase.respuestasGenericas.some(
            resp => resp === respuestaLocal.contenido
        );

        if (respuestaLocal.tipo === "texto" && esRespuestaGenerica) {
            const respuestaGemini = await consultarGemini(mensaje);
            if (respuestaGemini) {
                gestionarContexto(idUsuario, mensaje, respuestaGemini.contenido);
                return renderizarRespuestaEnChat(respuestaGemini);
            }
            
            const respuestaWit = await consultarWitAI(mensaje);
            if (respuestaWit) {
                gestionarContexto(idUsuario, mensaje, respuestaWit.contenido);
                return renderizarRespuestaEnChat(respuestaWit);
            }
        }

        // 12. Devolver respuesta local
        gestionarContexto(idUsuario, mensaje, respuestaLocal.contenido);
        return renderizarRespuestaEnChat(respuestaLocal);

    } catch (error) {
        console.error("Error en procesarMensaje:", error);
        const errorMsg = '<div class="chat-response">Error al procesar el mensaje. Intenta de nuevo.</div>';
        gestionarContexto(idUsuario, mensaje, errorMsg);
        return errorMsg;
    }
};

// ==================== RENDERIZADO Y ESTILOS ====================
export const renderizarRespuestaEnChat = (respuesta) => {
    if (!respuesta) {
        return '<div class="chat-response">No se pudo generar una respuesta.</div>';
    }

    if (respuesta.tipo === "imagenes") {
        let html = `<div class="chat-response images-response">
            <div class="response-text">${respuesta.contenido}</div>
            <div class="images-container">`;

        respuesta.imagenes.forEach((img, index) => {
            html += `
                <div class="chat-image" onclick="window.open('${img.original}', '_blank')">
                    <img src="${img.url}" alt="${img.description || 'Producto PVC'}" loading="lazy">
                    <div class="image-caption">
                        <small>Foto: ${img.photographer}</small>
                    </div>
                </div>`;
        });

        html += `</div>
            <div class="image-note">
                <em>üí° Im√°genes de referencia - B√∫squeda: "${respuesta.terminoBusqueda}"</em>
            </div>
        </div>`;

        return html;
    } else {
        // Procesar texto para mejor visualizaci√≥n
        const contenidoFormateado = respuesta.contenido
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/\n/g, '<br>');
            
        return `<div class="chat-response text-response">${contenidoFormateado}</div>`;
    }
};

export const estilosImagenesChat = `
<style>
.images-response {
    margin: 15px 0;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 10px;
}

.images-container {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
    margin: 12px 0;
}

.chat-image {
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
    max-width: 100%;
    width: 150px;
    height: auto;
    margin: 0 auto;
}

.chat-image:hover {
    transform: translateY(-2px);
    border-color: #007bff;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.chat-image img {
    width: 100%;
    height: auto;
    object-fit: cover;
    display: block;
}

.image-caption {
    padding: 8px;
    background: #f1f3f4;
    text-align: center;
    font-size: 0.75em;
    color: #666;
}

.image-note {
    margin-top: 12px;
    font-size: 0.85em;
    color: #666;
    font-style: italic;
    text-align: center;
    padding: 8px;
    background: #e9ecef;
    border-radius: 4px;
}

.text-response {
    margin: 10px 0;
    padding: 12px;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #007bff;
}

.response-text {
    margin-bottom: 15px;
    font-weight: 500;
    color: #333;
    white-space: pre-line;
}
</style>
`;

// ==================== INICIALIZACI√ìN ====================
export const inicializarChatbot = () => {
    console.log('üöÄ Chatbot TUBCON Mejorado inicializado correctamente');
    console.log('üîç Mejoras implementadas:');
    console.log('   - Sistema de detecci√≥n de productos MEJORADO');
    console.log('   - Manejo de cantidades autom√°tico');
    console.log('   - Flujo de contacto completo (nombre, email, tel√©fono)');
    console.log('   - Confirmaci√≥n de env√≠o de correo');
    console.log('   - Eliminaci√≥n de productos mejorada');
    console.log('   - Interfaz de usuario m√°s clara');
    console.log('   - Sistema de recomendaci√≥n t√©cnica avanzada');
    console.log('   - B√∫squeda de im√°genes integrada');
};

// Inicializar autom√°ticamente
inicializarChatbot();